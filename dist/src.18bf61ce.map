{"version":3,"sources":["../node_modules/dialog-polyfill/dialog-polyfill.js","index.js"],"names":["dialogPolyfill","require","dialog","document","querySelector","registerDialog","openModalLinks","querySelectorAll","link","addEventListener","openModal","bind","e","preventDefault","AMOUNT_PARAM","href","INDEX_OF_AMOUNT_IN_HREF","indexOf","length","amount","slice","textContent","showModal","setTimeout","window","location"],"mappings":";;AAkuBA,IAAA,GAluBA,WAGA,IAAA,EAAA,OAAA,YA2CA,SAAA,EAAA,GACA,KAAA,GAAA,CACA,GAAA,WAAA,EAAA,UACA,OAAA,EAEA,EAAA,EAAA,cAEA,OAAA,KAUA,SAAA,EAAA,GACA,GAAA,EAAA,MAAA,IAAA,SAAA,MACA,EAAA,OASA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,KAAA,EACA,OAAA,EAGA,OAAA,EAOA,SAAA,EAAA,GACA,SAAA,IAAA,EAAA,aAAA,YAGA,WAAA,EAAA,aAAA,UAAA,cAOA,SAAA,EAAA,GAkBA,GAjBA,KAAA,QAAA,EACA,KAAA,mBAAA,EACA,KAAA,cAAA,EAGA,EAAA,aAAA,SACA,EAAA,aAAA,OAAA,UAGA,EAAA,KAAA,KAAA,KAAA,KAAA,MACA,EAAA,UAAA,KAAA,UAAA,KAAA,MACA,EAAA,MAAA,KAAA,MAAA,KAAA,MAEA,gBAAA,IACA,EAAA,YAAA,IAGA,qBAAA,OAAA,CACA,IAAA,iBAAA,KAAA,eAAA,KAAA,OACA,QAAA,EAAA,CAAA,YAAA,EAAA,gBAAA,CAAA,cACA,CAIA,IAKA,EALA,GAAA,EACA,EAAA,WACA,EAAA,KAAA,iBAAA,KAAA,iBACA,GAAA,GACA,KAAA,MAEA,EAAA,SAAA,GACA,GAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,iBACA,GAAA,EAAA,KAAA,OAAA,EAAA,EAAA,UAAA,EACA,OAAA,aAAA,GACA,EAAA,OAAA,WAAA,EAAA,KAEA,CAAA,kBAAA,iBAAA,8BAAA,QAAA,SAAA,GACA,EAAA,iBAAA,EAAA,KAMA,OAAA,eAAA,EAAA,OAAA,CACA,IAAA,KAAA,QAAA,KAAA,MACA,IAAA,EAAA,aAAA,KAAA,EAAA,UAGA,KAAA,UAAA,SAAA,cAAA,OACA,KAAA,UAAA,UAAA,WACA,KAAA,UAAA,iBAAA,QAAA,KAAA,eAAA,KAAA,OAlJA,GAAA,iBAAA,KACA,EAAA,SAAA,EAAA,GACA,EAAA,GAAA,GACA,IAAA,EAAA,SAAA,YAAA,eAEA,OADA,EAAA,gBAAA,IAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,MACA,IAEA,UAAA,OAAA,MAAA,WA8IA,EAAA,UAAA,CAEA,aACA,OAAA,KAAA,SAQA,eAAA,WACA,KAAA,QAAA,aAAA,SAAA,SAAA,KAAA,SAAA,KAAA,UACA,KAAA,kBAMA,eAAA,WACA,KAAA,eACA,KAAA,cAAA,EACA,KAAA,QAAA,MAAA,OAAA,GAKA,KAAA,oBACA,KAAA,QAAA,MAAA,IAAA,GACA,KAAA,mBAAA,GAIA,KAAA,UAAA,YAAA,KAAA,UAAA,WAAA,YAAA,KAAA,WACA,EAAA,GAAA,aAAA,QAMA,QAAA,SAAA,GACA,EACA,KAAA,QAAA,aAAA,SAAA,KAAA,QAAA,aAAA,OAAA,KAEA,KAAA,QAAA,gBAAA,QACA,KAAA,mBAUA,eAAA,SAAA,GACA,GAAA,KAAA,QAAA,aAAA,YAUA,KAAA,QAAA,YAVA,CAIA,IAAA,EAAA,SAAA,cAAA,OACA,KAAA,QAAA,aAAA,EAAA,KAAA,QAAA,YACA,EAAA,UAAA,EACA,EAAA,QACA,KAAA,QAAA,YAAA,GAKA,IAAA,EAAA,SAAA,YAAA,eACA,EAAA,eAAA,EAAA,KAAA,EAAA,QAAA,EAAA,WAAA,OACA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QACA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,OAAA,EAAA,eACA,KAAA,QAAA,cAAA,GACA,EAAA,mBAOA,OAAA,WAEA,IAAA,EAAA,KAAA,QAAA,cAAA,+BAIA,IAHA,GAAA,KAAA,QAAA,UAAA,IACA,EAAA,KAAA,UAEA,EAAA,CAGA,IACA,EADA,CAAA,SAAA,QAAA,SAAA,SAAA,YACA,IAAA,SAAA,GACA,OAAA,EAAA,qBAGA,EAAA,KAAA,iDACA,EAAA,KAAA,QAAA,cAAA,EAAA,KAAA,OAEA,EAAA,SAAA,eACA,GAAA,EAAA,SASA,aAAA,SAAA,EAAA,GACA,GAAA,EAAA,EACA,MAAA,IAAA,MAAA,uCAEA,KAAA,QAAA,MAAA,OAAA,EACA,KAAA,UAAA,MAAA,OAAA,GAMA,KAAA,WACA,KAAA,QAAA,OACA,KAAA,SAAA,GACA,KAAA,WAOA,UAAA,WACA,GAAA,KAAA,QAAA,aAAA,QACA,MAAA,IAAA,MAAA,iHAEA,IAAA,SAAA,KAAA,SAAA,KAAA,SACA,MAAA,IAAA,MAAA,8EAEA,IAAA,EAAA,GAAA,WAAA,MACA,MAAA,IAAA,MAAA,oFAhRA,SAAA,GACA,KAAA,GAAA,IAAA,SAAA,MAAA,CACA,IAAA,EAAA,OAAA,iBAAA,GACA,EAAA,SAAA,EAAA,GACA,aAAA,IAAA,EAAA,IAAA,EAAA,KAAA,IAEA,GAAA,EAAA,QAAA,GACA,EAAA,SAAA,SACA,EAAA,YAAA,SACA,EAAA,eAAA,WACA,EAAA,SAAA,SACA,EAAA,cAAA,SACA,YAAA,EAAA,WACA,UAAA,EAAA,UACA,UAAA,EAAA,wBACA,OAAA,EAEA,EAAA,EAAA,cAEA,OAAA,GAgQA,CAAA,KAAA,QAAA,gBACA,QAAA,KAAA,+LAKA,KAAA,SAAA,GACA,KAAA,cAAA,EAGA,EAAA,eAAA,KAAA,UACA,EAAA,WAAA,KAAA,SACA,KAAA,mBAAA,GAEA,KAAA,mBAAA,EAIA,KAAA,QAAA,WAAA,aAAA,KAAA,UAAA,KAAA,QAAA,aAGA,KAAA,UASA,MAAA,SAAA,GACA,IAAA,KAAA,QAAA,aAAA,QACA,MAAA,IAAA,MAAA,uHAEA,KAAA,SAAA,QAGA,IAAA,IACA,KAAA,QAAA,YAAA,GAIA,IAAA,EAAA,IAAA,EAAA,QAAA,CACA,SAAA,EACA,YAAA,IAEA,KAAA,QAAA,cAAA,KAKA,IAAA,EAAA,CAEA,WAAA,SAAA,GACA,IAAA,EAAA,SAAA,KAAA,WAAA,SAAA,gBAAA,UACA,EAAA,GAAA,OAAA,YAAA,EAAA,cAAA,EACA,EAAA,MAAA,IAAA,KAAA,IAAA,EAAA,GAAA,MAGA,gCAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,SAAA,YAAA,SAAA,EAAA,CACA,IAAA,EAAA,SAAA,YAAA,GACA,EAAA,KAEA,IACA,EAAA,EAAA,SACA,MAAA,IACA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,KAEA,IACA,EAAA,SAAA,iBAAA,EAAA,cACA,MAAA,IACA,GAAA,GAAA,EAAA,EAAA,GAAA,CAGA,IAAA,EAAA,EAAA,MAAA,iBAAA,OACA,EAAA,EAAA,MAAA,iBAAA,UACA,GAAA,GAAA,SAAA,GAAA,GAAA,SAAA,EACA,OAAA,IAIA,OAAA,GAGA,eAAA,SAAA,GAEA,MAAA,aADA,OAAA,iBAAA,GACA,aAQA,SAAA,EAAA,MAAA,KAAA,KAAA,EAAA,MAAA,KACA,SAAA,EAAA,MAAA,QAAA,KAAA,EAAA,MAAA,UAGA,EAAA,gCAAA,KAMA,oBAAA,SAAA,GAKA,IAJA,OAAA,mBAAA,EAAA,YACA,QAAA,KAAA,8EACA,GAEA,WAAA,EAAA,UACA,MAAA,IAAA,MAAA,2DAEA,IAAA,EAAA,IAMA,eAAA,SAAA,GACA,EAAA,WACA,EAAA,oBAAA,IAOA,cAAA,WAEA,KAAA,mBAAA,GAEA,IAAA,EAAA,KAAA,UAAA,KAAA,MAOA,KAAA,QAAA,SAAA,cAAA,OACA,KAAA,QAAA,UAAA,kBACA,KAAA,QAAA,iBAAA,QAAA,SAAA,GACA,KAAA,iBAAA,EACA,EAAA,kBACA,EAAA,KACA,KAAA,OAEA,KAAA,WAAA,KAAA,WAAA,KAAA,MACA,KAAA,aAAA,KAAA,aAAA,KAAA,MAEA,KAAA,WAAA,IACA,KAAA,YAAA,OAEA,KAAA,iBAAA,EAEA,qBAAA,SACA,KAAA,IAAA,IAAA,iBAAA,SAAA,GACA,IAAA,EAAA,GACA,EAAA,QAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,aAAA,KAAA,EACA,aAAA,UAEA,WAAA,EAAA,WACA,EAAA,KAAA,GAEA,EAAA,EAAA,OAAA,EAAA,iBAAA,cAGA,EAAA,QAAA,EAAA,QAqKA,GA5JA,EAAA,cAAA,UAAA,cAAA,WACA,SAAA,gBAAA,iBAAA,QAAA,KAAA,cAAA,GACA,SAAA,iBAAA,UAAA,KAAA,YACA,KAAA,KAAA,KAAA,IAAA,QAAA,SAAA,CAAA,WAAA,EAAA,SAAA,KAOA,EAAA,cAAA,UAAA,gBAAA,WACA,SAAA,gBAAA,oBAAA,QAAA,KAAA,cAAA,GACA,SAAA,oBAAA,UAAA,KAAA,YACA,KAAA,KAAA,KAAA,IAAA,cAMA,EAAA,cAAA,UAAA,eAAA,WAGA,IAFA,IAEA,EAFA,EAAA,KAAA,YAEA,EAAA,EAAA,EAAA,KAAA,mBAAA,KAAA,EACA,EAAA,eAAA,IAAA,GACA,IAAA,IACA,KAAA,QAAA,MAAA,SAAA,GAKA,IAAA,EAAA,KAAA,mBAAA,GACA,GACA,EAAA,OAAA,YAAA,SAAA,MACA,YAAA,KAAA,SACA,KAAA,QAAA,YACA,KAAA,QAAA,WAAA,YAAA,KAAA,UAQA,EAAA,cAAA,UAAA,sBAAA,SAAA,GACA,KAAA,EAAA,EAAA,IAAA,CACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,mBAAA,KAAA,EACA,GAAA,EAAA,SAAA,EACA,OAAA,IAAA,EAGA,EAAA,EAAA,cAEA,OAAA,GAGA,EAAA,cAAA,UAAA,aAAA,SAAA,GACA,IAAA,KAAA,sBAAA,EAAA,UAEA,EAAA,iBACA,EAAA,kBACA,EAAA,EAAA,aAEA,IAAA,KAAA,aAAA,CAEA,IAAA,EAAA,KAAA,mBAAA,GAaA,OAZA,EAAA,OACA,wBAAA,EAAA,QACA,KAAA,8BACA,KAAA,YACA,EAAA,SAEA,SAAA,gBAAA,UAMA,IAGA,EAAA,cAAA,UAAA,WAAA,SAAA,GAEA,GADA,KAAA,iBAAA,EACA,KAAA,EAAA,QAAA,CACA,EAAA,iBACA,EAAA,kBACA,IAAA,EAAA,IAAA,EAAA,SAAA,CACA,SAAA,EACA,YAAA,IAEA,EAAA,KAAA,mBAAA,GACA,GAAA,EAAA,OAAA,cAAA,IACA,EAAA,OAAA,aAEA,IAAA,EAAA,UACA,KAAA,aAAA,EAAA,WAUA,EAAA,cAAA,UAAA,UAAA,SAAA,GAIA,KAAA,mBAAA,QACA,QAAA,SAAA,IACA,IAAA,EAAA,QAAA,EAAA,QACA,EAAA,iBAEA,EAAA,oBASA,EAAA,cAAA,UAAA,WAAA,SAAA,GACA,IAAA,GAAA,KAAA,YAAA,KAAA,YAAA,EAAA,EACA,QAAA,KAAA,mBAAA,QAAA,KAGA,IAAA,KAAA,mBAAA,QAAA,IACA,KAAA,gBAEA,KAAA,kBACA,IAMA,EAAA,cAAA,UAAA,aAAA,SAAA,GACA,IAAA,EAAA,KAAA,mBAAA,QAAA,IACA,IAAA,IAEA,KAAA,mBAAA,OAAA,EAAA,GACA,IAAA,KAAA,mBAAA,QACA,KAAA,kBAEA,KAAA,mBAGA,EAAA,GAAA,IAAA,EAAA,cACA,EAAA,cAAA,KACA,EAAA,SAAA,UAMA,IAAA,OAAA,kBAAA,CAMA,IAAA,EAAA,SAAA,cAAA,QAEA,GADA,EAAA,aAAA,SAAA,UACA,WAAA,EAAA,OAAA,CACA,IAAA,EAAA,OAAA,yBAAA,gBAAA,UAAA,UACA,GAAA,EAAA,CAGA,IAAA,EAAA,EAAA,IACA,EAAA,IAAA,WACA,OAAA,EAAA,MACA,SAEA,EAAA,KAAA,OAEA,IAAA,EAAA,EAAA,IACA,EAAA,IAAA,SAAA,GACA,MAAA,iBAAA,GAAA,WAAA,EAAA,cACA,KAAA,aAAA,SAAA,GAEA,EAAA,KAAA,KAAA,IAEA,OAAA,eAAA,gBAAA,UAAA,SAAA,IASA,SAAA,iBAAA,QAAA,SAAA,GAGA,GAFA,EAAA,cAAA,KACA,EAAA,SAAA,MACA,EAAA,iBAAA,CAEA,IAAA,EAAA,EAAA,OACA,GAAA,GAAA,EAAA,EAAA,MAAA,CAGA,KADA,WAAA,EAAA,MAAA,CAAA,SAAA,SAAA,QAAA,EAAA,YAAA,GACA,CACA,GAAA,UAAA,EAAA,WAAA,UAAA,EAAA,KAAA,OAEA,EAAA,SAAA,EAAA,QAAA,IAAA,EAAA,QAGA,EAAA,KAGA,EAAA,cAAA,OACA,GAMA,IAAA,EAAA,gBAAA,UAAA,OAQA,gBAAA,UAAA,OAPA,WACA,IAAA,EAAA,MACA,OAAA,EAAA,KAAA,MAEA,IAAA,EAAA,EAAA,MACA,GAAA,EAAA,SAQA,SAAA,iBAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,OACA,GAAA,EAAA,GAAA,CACA,EAAA,iBAEA,IAAA,EAAA,EAAA,GACA,GAAA,EAAA,CAIA,IAAA,EAAA,EAAA,cACA,GAAA,EAAA,OAAA,EACA,EAAA,MAAA,EAAA,UAAA,EAAA,OAEA,EAAA,QAEA,EAAA,cAAA,SACA,GAGA,EAAA,oBAAA,EAAA,oBACA,EAAA,eAAA,EAAA,eAEA,mBAAA,GAAA,QAAA,EAEA,EAAA,WAAA,OAAA,IACA,iBAAA,QAAA,iBAAA,OAAA,QAEA,OAAA,QAAA,EAGA,OAAA,eAAA,EA/tBA;;ACAA,IAAMA,EAAiBC,QAAQ,mBACzBC,EAASC,SAASC,cAAc,UACtCJ,EAAeK,eAAeH,GAC9B,IAAMI,EAAkBH,SAASI,iBAAiB,iBAkBjD,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAjBeD,IAAAA,IAAe,EAAfA,EAAAA,EAAe,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAvBE,IAAAA,EAAuB,EAAA,MAC3BA,EAAKC,iBAAiB,QAASC,EAAUC,KAAKH,KAgBjD,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAdD,SAASE,EAAUE,GACfA,EAAEC,iBACIC,IACAC,EAAO,KAAKA,KACZC,EAA0BD,EAAKE,QAFhB,YAAA,WAEqDC,OACpEC,EAASJ,EAAKK,MAAMJ,GACvBD,EAAKE,QAJa,aAIY,IACPd,SAASC,cAAc,kBAC/BiB,YAAc,QAAUF,GAE1CjB,EAAOoB,YACPC,WAAW,WACPC,OAAOC,SAASV,KAAOA,GACzB","file":"src.18bf61ce.map","sourceRoot":"../src","sourcesContent":["(function() {\n\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function(k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      }\n      if (s.opacity < 1 ||\n          invalid('zIndex', 'auto') ||\n          invalid('transform', 'none') ||\n          invalid('mixBlendMode', 'normal') ||\n          invalid('filter', 'none') ||\n          invalid('perspective', 'none') ||\n          s['isolation'] === 'isolate' ||\n          s.position === 'fixed' ||\n          s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return /** @type {HTMLDialogElement} */ (el);\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function() {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function(ev) {\n        if (ev.target !== dialog) { return; }  // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= (ev.type.substr(0, cand.length) === cand);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function() {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function() {\n      if (!this.openAsModal_) { return; }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function(value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal();  // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function(e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function() {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function(el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function(dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function() {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function() {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' +\n            'This may cause it to be unusable. For more information, see this link: ' +\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function(opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n\n  };\n\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function(element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) { continue; }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch(e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function(dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function(element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' +\n          'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function(element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function() {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function(e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]);  // sanity-check DOM\n    }.bind(this));\n\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function(records) {\n        var removed = [];\n        records.forEach(function(rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0;  // only valid if top-most\n        }\n      }\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n    if (this.containedByTopDialog_(event.target)) { return; }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ (event.target));\n\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {  // forward\n        dpi.focus_();\n      } else {  // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function(dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) { return; }\n\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function() {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function(v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function(ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ (ev.target);\n      if (!target || !isFormMethodDialog(target.form)) { return; }\n\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n      if (!dialog) { return; }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function(ev) {\n      var form = /** @type {HTMLFormElement} */ (ev.target);\n      if (!isFormMethodDialog(form)) { return; }\n      ev.preventDefault();\n\n      var dialog = findNearestDialog(form);\n      if (!dialog) { return; }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (typeof define === 'function' && 'amd' in define) {\n    // AMD support\n    define(function() { return dialogPolyfill; });\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();\n","const dialogPolyfill = require('dialog-polyfill');\nconst dialog = document.querySelector('dialog');\ndialogPolyfill.registerDialog(dialog);\nconst openModalLinks =  document.querySelectorAll('a.donate-card');\nfor(let link of openModalLinks){\n    link.addEventListener('click', openModal.bind(link));\n}\nfunction openModal(e) {\n    e.preventDefault();\n    const AMOUNT_PARAM = 'xAmount=',\n          href = this.href,\n          INDEX_OF_AMOUNT_IN_HREF = href.indexOf(AMOUNT_PARAM) + AMOUNT_PARAM.length,\n          amount = href.slice(INDEX_OF_AMOUNT_IN_HREF);\n    if(href.indexOf(AMOUNT_PARAM) >= 0){\n        const pledge_amount = document.querySelector('#pledge-amount');\n        pledge_amount.textContent = ' of $' + amount \n    }\n    dialog.showModal();\n    setTimeout(()=>{\n        window.location.href = href\n    },2000)\n}"]}